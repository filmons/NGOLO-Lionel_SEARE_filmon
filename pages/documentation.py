import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Configuration de la page
st.set_page_config(page_title="App des Incendies de For√™t", page_icon="üî•", layout="wide")

# Charger et pr√©parer les donn√©es
@st.cache
def load_data():
    data = pd.read_csv("data_forest_fires.csv")
    # Convertir les mois en num√©rique
    months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
    data['month'] = data['month'].apply(lambda x: months.index(x) + 1)
    # Convertir les jours en num√©rique
    days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']
    data['day'] = data['day'].apply(lambda x: days.index(x) + 1)
    return data

df = load_data()

# Header principal de l'application
st.title("Projet de Pr√©diction des Incendies de For√™t")
st.header("Utiliser l'IA pour comprendre et pr√©dire les incendies de for√™t")

# Sidebar pour la navigation
st.sidebar.header("Navigation")
sidebar_options = ["Introduction", "√Ä propos des Donn√©es", "Visualisations", "Documentation"]
selection = st.sidebar.radio("Aller √†", options=sidebar_options)

# Gestion de la navigation
if selection == "Introduction":
    st.subheader("Introduction")
    st.write("""
    ## √âtapes du Projet jusqu'√† la Pr√©diction des Incendies de For√™t
    
    Ce projet a pour objectif de pr√©dire les incendies de for√™t en utilisant des techniques d'intelligence artificielle. Les √©tapes principales du projet sont les suivantes :
    
    ### 1. Collecte des Donn√©es
    - **Source des Donn√©es** : Les donn√©es sont collect√©es √† partir de diverses sources telles que des capteurs m√©t√©orologiques, des rapports d'incendies, et des bases de donn√©es publiques.
    - **Variables** : Les donn√©es comprennent des variables comme la temp√©rature, l'humidit√©, la vitesse du vent, la pluie, et la superficie br√ªl√©e.

    ### 2. Pr√©paration des Donn√©es
    - **Nettoyage des Donn√©es** : Les donn√©es brutes sont nettoy√©es pour supprimer les valeurs manquantes et les anomalies.
    - **Transformation des Donn√©es** : Les variables cat√©gorielles telles que les mois et les jours sont converties en valeurs num√©riques pour faciliter l'analyse et la mod√©lisation.

    ### 3. Analyse Exploratoire des Donn√©es (EDA)
    - **Visualisation des Donn√©es** : Utilisation de graphiques pour comprendre les distributions et les relations entre les variables.
    - **Statistiques Descriptives** : Calcul des mesures de tendance centrale et de dispersion pour r√©sumer les donn√©es.

    ### 4. D√©veloppement du Mod√®le d'IA
    - **Outils Utilis√©s** : 
        - **Langage de Programmation** : Python
        - **Biblioth√®ques** : Scikit-learn pour le machine learning, Pandas pour la manipulation des donn√©es, Matplotlib et Seaborn pour les visualisations.
    - **S√©lection du Mod√®le** : Choix des algorithmes appropri√©s (par exemple, r√©gression lin√©aire, for√™ts al√©atoires, r√©seaux de neurones) en fonction des donn√©es et des objectifs du projet.
    - **Entra√Ænement du Mod√®le** : Utilisation des donn√©es pr√©par√©es pour entra√Æner le mod√®le d'IA. Par exemple, un mod√®le de r√©gression lin√©aire pour pr√©dire la superficie br√ªl√©e en fonction des variables m√©t√©orologiques.
    - **√âvaluation du Mod√®le** : Mesure des performances du mod√®le √† l'aide de m√©triques telles que l'exactitude, la pr√©cision, et le rappel. Validation crois√©e pour √©valuer la robustesse du mod√®le.

    ### 5. D√©ploiement et Visualisation
    - **D√©ploiement** : Mise en ≈ìuvre du mod√®le dans une application web en utilisant FastAPI pour le backend et Streamlit pour l'interface utilisateur, permettant de pr√©dire les incendies de for√™t en temps r√©el.
    - **Visualisations** : Cr√©ation de graphiques interactifs avec Plotly pour permettre aux utilisateurs de visualiser les pr√©dictions et d'explorer les donn√©es.
""")

elif selection == "√Ä propos des Donn√©es":
    st.subheader("√Ä Propos des Donn√©es")
    st.write("Ci-dessous, les donn√©es originales sans transformation :")
    original_data = pd.read_csv("data_forest_fires.csv")
    st.dataframe(original_data)
    st.write("Ci-dessous, les donn√©es transform√©es avec les mois et jours convertis en valeurs num√©riques :")
    st.dataframe(df)
    st.write("Statistiques descriptives des donn√©es transform√©es :")
    st.write(df.describe())
    st.download_button("T√©l√©charger les Donn√©es", data=open("data_forest_fires.csv", "rb"), file_name="data_forest_fires.csv")

elif selection == "Visualisations":
    st.subheader("Visualisations")
    
    # Histogramme des Temp√©ratures
    st.write("### Distribution des Temp√©ratures")
    st.write("Cette visualisation montre comment les valeurs de temp√©rature sont r√©parties dans l'ensemble des donn√©es. "
             "Cela permet d'identifier les plages de temp√©rature les plus fr√©quentes et de d√©tecter les valeurs extr√™mes.")
    fig_temp = px.histogram(df, x='temp', nbins=30, title="Distribution des Temp√©ratures")
    st.plotly_chart(fig_temp)

    # Scatter Plot Vitesse du Vent vs. Area
    st.write("### Relation entre Vitesse du Vent et Superficie Br√ªl√©e")
    st.write("Ce graphique en nuage de points explore la relation entre la vitesse du vent (exprim√©e en km/h) et la superficie br√ªl√©e. "
             "Les couleurs repr√©sentent les diff√©rents mois de l'ann√©e, permettant d'observer les tendances saisonni√®res.")
    fig_wind_area = px.scatter(df, x='wind', y='area', color='month', title="Relation entre Vitesse du Vent et Superficie Br√ªl√©e")
    st.plotly_chart(fig_wind_area)

    # Moyenne des Aires br√ªl√©es par Mois
    st.write("### Moyenne des Aires Br√ªl√©es par Mois")
    st.write("Ce diagramme √† barres montre la moyenne de la superficie br√ªl√©e pour chaque mois. "
             "Cela aide √† identifier les mois o√π les incendies sont les plus fr√©quents et les plus d√©vastateurs.")
    df_month_area = df.groupby('month')['area'].mean().reset_index()
    fig_area_month = px.bar(df_month_area, x='month', y='area', title="Moyenne des Aires Br√ªl√©es par Mois")
    st.plotly_chart(fig_area_month)

    # Heatmap des Corr√©lations
    st.write("### Heatmap des Corr√©lations")
    st.write("La heatmap des corr√©lations montre les relations lin√©aires entre les diff√©rentes variables du dataset. "
             "Les coefficients de corr√©lation varient entre -1 et 1 :\n"
             "- **1** : Corr√©lation positive parfaite\n"
             "- **0** : Aucune corr√©lation\n"
             "- **-1** : Corr√©lation n√©gative parfaite\n"
             "Cette visualisation aide √† identifier les variables qui sont fortement corr√©l√©es entre elles, "
             "ce qui peut √™tre utile pour comprendre les facteurs influen√ßant les incendies de for√™t.")
    corr = df.corr()
    fig_heatmap = go.Figure(data=go.Heatmap(z=corr.values,
                                            x=corr.index.values,
                                            y=corr.columns.values,
                                            colorscale='Viridis'))
    fig_heatmap.update_layout(title="Heatmap des Corr√©lations",
                              xaxis_title="Variables",
                              yaxis_title="Variables")
    st.plotly_chart(fig_heatmap)

elif selection == "Documentation":
    st.subheader("Documentation")
    st.components.v1.iframe("http://127.0.0.1:8000/docs", height=1000, width=1000, scrolling=True)

# Footer/contact
st.sidebar.header("Contact")
st.sidebar.write("Pour plus d'informations, veuillez contacter l'administrateur du projet √† admin@example.com.")
